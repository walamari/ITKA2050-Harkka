## Harjoitustyöraportti

Palauttajat (max 3): Valtteri Peltoniemi ja  Joona Laitinen

Pisteitä yhteensä: 3.

===============================================================================================================


## Ongelma 1
Tyyppi:   Shell-injektio
Sijainti: Aliohjelma checkerLoop
Kuvaus: CheckerLoop käynnistää shellin tarkistaakseen tiedoston tyypin. Tämä on ongelma, koska
vihamielinen käyttäjä pystyy tiedoston nimen avulla käskyttämään shelliä haluamallaan tavalla.

### Esimerkkihyökkäys: 
1) Kirjaudu sisään
2) Lataa kuva jonka tiedoston nimi sisällään esimerkiksi putkitetun shell käskyn
    "kuva.png;echo kissa123"
3) shelliin ilmestyy kissa123. Shell komento voi olla esimerkkiä paljon pahempi

### Korjaus:

Commit: 4bd62bded56dc9747f357ae94fe6bfd00b51557c

Korjasimme tämän aluksi Villen luentovideon ohjeilla, mikä oli melko simppeli tapa käsitellä
shell-injektioita. Eli merkkijonon sijasta lähetimme rakenteisen listan file prosessille.
Kuitenkin luennolla mainittiin siitä, että nämä shellin prosessit eivät ehkä ole paras tapa.
Päätimme siis hyödyntää erillistä kirjastoa, joka tarkistaa tiedoston tyypin.

Korjaus toimii, koska shelliä ei avata ollenkaan, vaan tiedoston tyyppi tarkistetaan erillistä kirjastoa hyödyntäen.

### Pisteet(3pt)

===============================================================================================================

## Ongelma 2
Tyyppi:   Polkuinjektio
Sijainti: checkPath()-aliohjelma
Kuvaus: Tällä hetkellä aliohjelma on melko kehnosti tehty suojautumaan polkuinjektioita vastaan. Tässä Aliohjelmassa
tarkistetaan ainoastaan sisältääkö polku merkkijonon "../", mikä ei riitä suojautumisessa polkuinjektioilta.


### Esimerkkihyökkäys: 
1) Kirjaudutaan sisään
2) Hae urlista tai komentorivillä ilman selainta haku, johon sisältyy suhteellinen polku, eli '../'-enkoodattuna tai
'./'-(tämä menee läpi ilman koodausta).
3) "Hyökkääjä" pääsee käsiksi tiedostorakenteisiin, joihin hänellä ei tulisi olla pääsyä

### Korjaus:
Korjasimme tämän normalisoimalla polun checkPath()-aliohjelmassa ja vertaamalla tätä syötettyyn polkuun. Jos polut eroavat toisistaan,
voimme varmuudella heittää pathInjection-exceptionia.

Korjaus toimii, koska se ei päästä läpi suhteellisia polkuja, jotka voivat johtaa polkuinjektioihin.

### Pisteet(3pt)


===============================================================================================================


## Ongelma 3
Tyyppi:  XSS-injektio
Sijainti: Kuvan lisäämisessä ???
Kuvaus: Tiedoston nimellä voidaan vaikuttaa html rakenteeseen ja sijoittaa sekaan ilkeämilinen scripti. 

### Esimerkkihyökkäys: 
1)kirjaudu sisään
2) Lataa tiedosto jonka tiedostonimessä on html:ää, esimerkiksi tiedostonimi voisi olla "<button onmouseover="alert("HACK!")>".
3) Tiedoston nimi muokkaa sivuston rakennetta merkittävästi ja tässä esimerkissä lisää sivustolle javascriptiä. Tietysti aikeet ja tiedostonnimeäminen
voisi olla paljon ilkeämielisempääkin! 

### Korjaus:
### Pisteet(1pt)


===============================================================================================================


## Ongelma ?
Tyyppi:  ????
Sijainti: Login
Kuvaus: Login:n jälkeen näkee salasanan ja käyttäjänimen sivun syötteessä

### Esimerkkihyökkäys: 
### Korjaus:
### Pisteet(3pt)








------------------
Valmis esimerkki
------------------
## Ongelma 1

Tyyppi:   Polkuinjektio
Sijainti: delete_file()
Kuvaus:

Aliohjelmassa delete_file ei tarkasteta käyttäjän syöttämää polkua
millään tavalla. Tämä mahdollistaa sen, että käyttäjä tuhoaa minkä
tahansa tiedoston, esimerkiksi toisen käyttäjän tiedoston tai vaikkapa
jonkin järjestelmätiedoston.

### Esimerkkihyökkäys: 

1) Kirjaudu sisään käyttäjänä "sam".
2) Tee pyyntö /delete_file?file=../sue/tiedosto.txt
3) Tulos: Suen tiedosto tuhotaan

### Korjaus:

Commit: <git hash>


### Pisteet(3pt)

1pt vian löytämisestä
1pt vian korjaamisesta
1pt vikatyypin eliminoimisesta

## Ongelma 2

