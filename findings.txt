## Harjoitustyöraportti

Palauttajat (max 3): Valtteri Peltoniemi ja  Joona Laitinen

Pisteitä yhteensä: 20.

===============================================================================================================


## Ongelma 1
Tyyppi:   Shell-injektio
Sijainti: Aliohjelma checkerLoop
Kuvaus: CheckerLoop käynnistää shellin tarkistaakseen tiedoston tyypin. Tämä on ongelma, koska
vihamielinen käyttäjä pystyy tiedoston nimen avulla käskyttämään shelliä haluamallaan tavalla.

### Esimerkkihyökkäys: 
1) Kirjaudu sisään
2) Lataa kuva jonka tiedoston nimi sisällään esimerkiksi putkitetun shell käskyn
    "kuva.png;echo kissa123"
3) shelliin ilmestyy kissa123. Shell komento voi olla esimerkkiä paljon pahempi

### Korjaus:

Commit: 4bd62bded56dc9747f357ae94fe6bfd00b51557c

Korjasimme tämän aluksi Villen luentovideon ohjeilla, mikä oli melko simppeli tapa käsitellä
shell-injektioita. Eli merkkijonon sijasta lähetimme rakenteisen listan file prosessille.
Kuitenkin luennolla mainittiin siitä, että nämä shellin prosessit eivät ehkä ole paras tapa.
Päätimme siis hyödyntää erillistä kirjastoa, joka tarkistaa tiedoston tyypin.

Korjaus toimii, koska shelliä ei avata ollenkaan, vaan tiedoston tyyppi tarkistetaan erillistä kirjastoa hyödyntäen.

### Pisteet(3pt)

===============================================================================================================

## Ongelma 2
Tyyppi:   Polkuinjektio
Sijainti: checkPath()-aliohjelma
Kuvaus: Tällä hetkellä aliohjelma on melko kehnosti tehty suojautumaan polkuinjektioita vastaan. Tässä Aliohjelmassa
tarkistetaan ainoastaan sisältääkö polku merkkijonon "../", mikä ei riitä suojautumisessa polkuinjektioilta.

### Esimerkkihyökkäys: 
1) Kirjaudutaan sisään
2) Hae urlista tai komentorivillä ilman selainta haku, johon sisältyy suhteellinen polku, eli '../'-enkoodattuna tai
'./'-(tämä menee läpi ilman koodausta).
3) "Hyökkääjä" pääsee käsiksi tiedostorakenteisiin, joihin hänellä ei tulisi olla pääsyä

### Korjaus:

Commit: f3306a89ba6ee32afa36ed289072719fde3daa3a

Korjasimme tämän normalisoimalla polun checkPath()-aliohjelmassa ja vertaamalla tätä syötettyyn polkuun. Jos polut eroavat toisistaan,
voimme varmuudella heittää pathInjection-exceptionia.

Korjaus toimii, koska se ei päästä läpi suhteellisia polkuja, jotka voivat johtaa polkuinjektioihin.

### Pisteet(3pt)


===============================================================================================================


## Ongelma 3
Tyyppi:  XSS-injektio
Sijainti: upload_file-Aliohjelmassa
Kuvaus: Tiedoston nimellä voidaan vaikuttaa html rakenteeseen ja sijoittaa sekaan ilkeämilinen scripti.

### Esimerkkihyökkäys: 
1) Kirjaudu sisään
2) Lataa tiedosto jonka tiedostonimessä on html:ää, esimerkiksi tiedostonimi voisi olla "<button onmouseover="alert("HACK!")>".
3) Tiedoston nimi muokkaa sivuston rakennetta merkittävästi ja tässä esimerkissä lisää sivustolle javascriptiä. Tietysti aikeet ja tiedostonnimeäminen
voisi olla paljon ilkeämielisempääkin! 

### Korjaus:

Commit: b51f6935c49d099c01e387d5d7ca2c3439ea4b52

Korjasimme tämän tietoturvahaavoittuvuuden lisäämällä koodiin "bleach"-nimisen kirjaston, joka hoitaa käyttäjän syötteen,
tässä tapauksessa tiedoston nimen sanitoimisen. 

Korjaus toimii, sillä bleachin clean()-metodi enkoodaa tiedostonimen suotuisaan muotoon, mikä ei tule aiheuttamaan XSS-injektiota

### Pisteet(3pt)


===============================================================================================================


## Ongelma 4
Tyyppi:  Cookievirhe
Sijainti: serve_file-, delete_file-, upload_file- ja share_file-aliohjelmassa, eli kaikkialla, missä kutsutaan
         " request.cookies.get('username') " -komentoa
Kuvaus: Esimerkiksi Chromen developer toolssia hyödyntämällä voidaan editoida(vaihtaa) käyttäjänimen cookien arvoa.
        Esimerkiksi "samina" kirjautuneena voidaan tähän vaihtaa "sue" ja päästä käsiksi hänen tiedostoihin ja niiden
        poistamiseen, jakamiseen ja lataamiseen.

### Esimerkkihyökkäys: 
1) Kirjaudu sisään samina
2) Avaa etusivulla developer tools ja muuta application välilehden alta value sarakkeesta "sam" -> "sue". Päivitä sivu
3) Vapaa pääsy suen tiedostoihin

### Korjaus:
Commit: e5e6836b0c4a22dc69b3b57aff6152f06ad16696

Korjasimme tämän lisäämällä lähdekoodiin globaalin muuttujan, joka pitää sisällään tietoa siitä, kuka on kirjautunut
sisään viimeksi. 

Tämä korjaus toimii, koska jos sivustolla yrittää tehdä mitä vaan, kun cookien arvo on eriävä viimeksi kirjautuneen kanssa,
niin järjestelmä kaatuu ja heittää poikkeuksen, jossa kerrotaan, että on koitettu käyttää cookiesseja väärin.

### Pisteet(2pt)

===============================================================================================================


## Ongelma 5
Tyyppi:  LogForging
Sijainti: user_content
Kuvaus: lista hylätyistä tiedostoista laitetaan taulukkoon nimeämällä ne suoraan tiedostonimen mukaan, näin ollen 
        nettisivulle pääsee suoraan käyttäjän syötettä.

### Esimerkkihyökkäys: 
1) Kirjaudu sisään
2) Lisää sivulle tiedostoja, jotka eivät mene läpi .png tai .jpg testistä tai jaa "sopiva" tiedosto
3) Mahdollisuus tietyllä syötteellä väärentää hylättyjen tai jaettujen tiedostojen määrää.

### Korjaus:

Commit: 65537fc33dcd249f8e6d8b91baa8a7cff4f05a2d

Korjasimme tämän kohdan hyödyntämällä rakenteista dataa.

Korjaus toimii, koska jokainen hylätty tiedosto tulee olemaan rakenteista dataa, eikä ainoastaan merkkijono merkkijonon
perässä.

### Pisteet(3pt)


===============================================================================================================


## Ongelma 6
Tyyppi:  XSS-injektio
Sijainti: logout
Kuvaus: JOS järjestelmään olisi mahdollista luoda uusi käyttäjä, käyttäen vapaavalintaista käyttäjänimeä ilman sanitointia
voi tähän muuttujaan sijoittaa haitallisen merkkijonon.


### Esimerkkihyökkäys: 
1) Luo uusi käyttäjä haitallisella käyttäjänimellä
2) Kirjaudu ulos
3) Haitallinen käyttäjänimi muuttaa sivun rakennetta

### Korjaus:

Commit: 9d9799c313aec83b8cc7ad98017af2316b134e89

Kohta korjaantuisi sanitoimalla käyttäjänimet. Sanitointi suoritetaan bleach-kirjaston clean metodilla.
Kuitenkin tällähetkellä ohjelmaan kovakoodataan käyttäjänimet ja salasanat, joten korjaus tulisi oleelliseksi kun käyttäjät 
voivat luoda omia käyttäjiä ohjelmaan. 


Korjaus toimii koska clean metodi muuntaa käyttäjänimen html-elementit vaarattomiksi

### Pisteet(3pt)


===============================================================================================================


## Ongelma 7
Tyyppi: Url tietoturva
Sijainti: Login succesfull url
Kuvaus: Login:n jälkeen näkee salasanan ja käyttäjänimen sivun syötteessä

### Esimerkkihyökkäys: 
1) Kirjaudu sisään
2) Jätä login succesfull näkyville
3) Pahaa tahtova taho voi nähdä käyttäjänimen ja salasanan login succesfull sivun url:ssa 
   ja kirjautua sinuna myöhemmin sisään

### Korjaus:

commit: 7d0c425a46882e6ea27739fb281648c46a4712f5

Kohta korjaantuu mahdollisesti muuttamalla lähdekoodin toimintaa radikaalisti siten, että login succesfull sivua ei tulisi
ollenkaan vaan ohjelma siirtyisi suoraan onnistuneen kirjautumisen jälkeen käyttäjän tietoihin.

### Pisteet(1pt)


===============================================================================================================

## Ongelma 8
Tyyppi: Tietoturvaongelma
Sijainti: Käyttäjänimen ja salasanan kovakoodaus
Kuvaus: Lähdekoodiin on kovakoodattu kaikki käyttäjätunnukset ja salasanat, joten lähdekoodin haltija pääsee 
        käsiksi kaikkiin käyttäjiin.

### Esimerkkihyökkäys: 
1) Pääse käsiksi lähdekoodiin, hyökkäämällä tai vahingossa.
2) Lähdekoodista pääsee käsiksi kaikkien käyttäjien kirjautumistietoihin

### Korjaus:

Commit: 84e0301fc1d795a9b38a7590acbe5cb508631703

Ongelma voisi korjaantua siirtämällä käyttäjänimet ja salasanat vaikka tietokantaan ja salaamalla ne

### Pisteet(1pt)


===============================================================================================================

## Ongelma 9

Tyyppi: riippuvuussuhdehyökkäys
Sijainti: Lähdekoodi
Kuvaus: lähdekoodiin on importattu paketteja, joita ei ole itse sinne importattu. On teoriasssa mahdollista että 
        nämä importit sisältävät haittakoodia

### Esimerkkihyökkäys: 

1) Lataa paketti, joka sisältää haitallista koodissa.
2) Paketin haitallinen koodi aiheuttaa haavoittuvuuden. 


### Korjaus:

Kirjotojen tarkastaminen ja sellaisten kirjastojen käyttäminen joiden toiminnasta olet täysin varma. 
Myös oman kirjaston tekeminen on vaihtoehto.

Commit: 330fa7258ee167f640e29fa2d9044543be122317


### Pisteet(1pt)



